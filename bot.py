import disnake
from disnake.ext import commands, tasks
from disnake.ui import Button, View
from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport
import asyncio
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import json
import pytz
import aiohttp
from datetime import datetime, timedelta
import os
import atexit

intents = disnake.Intents.default()
intents.messages = True 
intents.members = True 
intents.reactions = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

discord_token = "MTI4Mjc2OTg2MTEwOTYxMjY3NQ.GfNH3F.cGRnx8mR4_RGS55BmYjwEFctBve33e_tPjFD8Y"

TWITCH_CLIENT_ID = "enspq6jfwy8e2dezkb5gc52plepju6"
TWITCH_CLIENT_SECRET = "r4eookccno8wra0d02bpz89i3k8iob"

last_up_bump_time = None

role_mappings = {
    "‚úÖ": "member"
}

stream_notified = {}

channel_id_verify = 1282779009461125153
message_id_verify = 1282781826779316235

channel_id_hello = 1282739459116503136
channel_id_bye = 1282756090265731203

#original
channel_id_stream = 1282751663534247977
ping_id_stream = 1282758184091648120
channel_id_clips = 1282751793876701275

#dev
# channel_id_stream = 1282807436830314517
# ping_id_stream = 1282758184091648120
# channel_id_clips = 1282807436830314517

bot.remove_command('help')

statuses = [
    "!help",
    "Twitch",
    "–Ω–∞ –ù–µ –ø—Ä–∏–¥—É–º–∞–ª —Å–æ—Ä–∏",
    "–Ω–∞ –º–∞—è—Ç–æ",
    "–Ω–∞ –≥–æ–≤–Ω—è—Ç–æ",
    "–Ω–∞ –º–Ω–µ–ª–µ–Ω—è"
]

status_index = 0

@tasks.loop(minutes=2)
async def change_status():
    global status_index
    status = statuses[status_index]
    await bot.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name=status))
    status_index = (status_index + 1) % len(statuses)

@bot.event
async def on_ready():
    print(f'We have logged in as {bot.user}')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    channel_id = 1282756369564569690  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel = bot.get_channel(channel_id)
    
    if channel:
        message = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéâ"
        await channel.send(message)
        print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.name}.')
    else:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {channel_id}.')

    change_status.start()


emoji_to_add_verify = "‚úÖ"

@bot.command(name='verify')
async def verify(ctx):

    if verify:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        embed = disnake.Embed(
            title="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é —Å –≥–∞–ª–æ—á–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É.",
            color=0x00FF00  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        )
        
        channel = bot.get_channel(channel_id_verify)  # –ö–∞–Ω–∞–ª –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        embed.set_image(url="https://i.pinimg.com/originals/d1/0d/10/d10d100c2e993cdc669d6960c3802e4d.jpg")
        
        if channel:
            message = await channel.send(embed=embed)
            await message.add_reaction(emoji_to_add_verify)
        else:
            print(f"Channel with ID {channel_id_verify} not found.")
    else:
        await ctx.send(f"Role '{verify}' not found.")


@bot.event
async def on_raw_reaction_add(payload):
    if payload.channel_id == channel_id_verify and payload.message_id == message_id_verify:
        guild = bot.get_guild(payload.guild_id)
        member = guild.get_member(payload.user_id)

        if member:
            role_name = role_mappings.get(payload.emoji.name)
            if role_name:
                role = disnake.utils.get(guild.roles, name=role_name)

                if role:
                    try:
                        await member.add_roles(role)
                        print(f"–í—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}")
                    except disnake.errors.Forbidden:
                        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ {role_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}")
                else:
                    print(f"–†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@bot.event
async def on_raw_reaction_remove(payload):
    if payload.channel_id == channel_id_verify and payload.message_id == message_id_verify:
        guild = bot.get_guild(payload.guild_id)
        member = guild.get_member(payload.user_id)

        if member:
            role_name = role_mappings.get(payload.emoji.name)
            if role_name:
                role = disnake.utils.get(guild.roles, name=role_name)

                if role:
                    try:
                        await member.remove_roles(role)
                        print(f"–£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å {role_name} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}")
                    except disnake.errors.Forbidden:
                        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ {role_name} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}")
                else:
                    print(f"–†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


#join people to server
@bot.event
async def on_member_join(member):
    channel = member.guild.get_channel(channel_id_hello)
    
    if channel:
        embed = disnake.Embed(
            description=(f"–ü—Ä–∏–≤–µ—Ç, {member.mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å.\n"
                        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É, –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ <#1282779009461125153>."),
            color=disnake.Color.green()
        )
        embed.set_image(url="https://c.tenor.com/vNapCUP0d3oAAAAC/tenor.gif")
        await channel.send(embed=embed)

#leave people from server
@bot.event
async def on_member_remove(member):
    channel = member.guild.get_channel(channel_id_bye)
    
    if channel:
        embed = disnake.Embed(
            description=f"–ü—Ä–æ—â–∞–π, {member.mention}. –ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ.",
            color=disnake.Color.red()
        )
        embed.set_image(url="https://c.tenor.com/4E1q900bMwgAAAAC/tenor.gif")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –≥–∏—Ñ–∫–∏
        await channel.send(embed=embed)


@bot.command(name='send')
async def send(ctx, channel_id: int, *, message: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
    role = disnake.utils.get(ctx.guild.roles, name='stuff')
    if role not in ctx.author.roles:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ `{role.name}`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ ID
    channel = bot.get_channel(channel_id)
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if channel:
        await channel.send(message)
        await ctx.send(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.mention}.")
    else:
        await ctx.send(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

stream_notified = {}

# Function to load streamers configuration from file or database
def load_streamers():
    with open('streamers.json', 'r') as file:
        streamers_config = json.load(file)
    return streamers_config

# Function to save streamers configuration to file or database
def save_streamers(streamers_config):
    with open('streamers.json', 'w') as file:
        json.dump(streamers_config, file, indent=4)

# Function to get Twitch access token
def get_twitch_token():
    url = 'https://id.twitch.tv/oauth2/token'
    params = {
        'client_id': TWITCH_CLIENT_ID,
        'client_secret': TWITCH_CLIENT_SECRET,
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, params=params)
    return response.json().get('access_token')

# Function to check if the user is live on Twitch
def is_user_live(username, access_token):
    url = f'https://api.twitch.tv/helix/streams?user_login={username}'
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    return len(data) > 0

async def get_stream_title(username, access_token):
    url = f"https://api.twitch.tv/helix/streams?user_login={username}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    if data:
        return data[0]['title']
    else:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"

async def get_streamer_avatar(username, access_token):
    url = f"https://api.twitch.tv/helix/users?login={username}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    if data:
        return data[0]['profile_image_url']
    else:
        return "https://static.twitchcdn.net/assets/favicon-32-e29e246c157142c94346.png"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def get_role_by_name(guild, role_name):
    return disnake.utils.get(guild.roles, name=role_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ
async def notify_stream():
    access_token = get_twitch_token()
    streamers_config = load_streamers()

    special_streamer_username = "twogirlswatching"
    special_users = [
        {"discord_id": "828993106421874758"}, 
        {"discord_id": "852865584952508447"}  
    ]

    currently_live = {}

    for streamer in streamers_config['streamers']:
        username = streamer['username']
        twitch_link = f"https://www.twitch.tv/{username}"

        if is_user_live(username, access_token):
            if not stream_notified.get(username, False):
                try:
                    title = await get_stream_title(username, access_token)
                    game_name = await get_stream_game(username, access_token)
                    viewer_count = await get_viewer_count(username, access_token)
                    avatar_url = await get_streamer_avatar(username, access_token)

                    formatted_title = f"[{title}]({twitch_link})"
                    embed = disnake.Embed(
                        title=title,
                        color=disnake.Color.purple()
                    )
                    embed.set_author(name=username, icon_url=avatar_url)
                    embed.add_field(name="–ò–≥—Ä–∞", value=game_name, inline=True)
                    embed.add_field(name="–ó—Ä–∏—Ç–µ–ª–∏", value=viewer_count, inline=True)
                    embed.set_image(url=f"https://static-cdn.jtvnw.net/previews-ttv/live_user_{username}-1920x1080.jpg")

                    button = disnake.ui.Button(style=disnake.ButtonStyle.link, label="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∏–º", url=twitch_link)
                    view = disnake.ui.View()
                    view.add_item(button)

                    channel = bot.get_channel(channel_id_stream)
                    if channel:
                        content = f"<@&{ping_id_stream}> {formatted_title}"
                        await channel.send(content=content, embed=embed, view=view)
                        stream_notified[username] = True
                        
                    guild = bot.get_guild(1282739459116503132)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    role = get_role_by_name(guild, "—Å—Ç—Ä–∏–º–∏—Ç")
                    if role:
                        if username == special_streamer_username:
                            # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º–∏—Ç "twogirlswatching", –≤—ã–¥–∞–µ–º —Ä–æ–ª—å –¥–≤—É–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                            for user in special_users:
                                member = guild.get_member(int(user["discord_id"]))
                                if member:
                                    await member.add_roles(role)
                                    print(f"–í—ã–¥–∞–Ω–∞ —Ä–æ–ª—å '—Å—Ç—Ä–∏–º–∏—Ç' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}")
                        else:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ —Å—Ç—Ä–∏–º–µ—Ä—É
                            for member in guild.members:
                                if str(member.id) == streamer['discord_id']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                    await member.add_roles(role)
                                    print(f"–í—ã–¥–∞–Ω–∞ —Ä–æ–ª—å '—Å—Ç—Ä–∏–º–∏—Ç' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —Å—Ç—Ä–∏–º–µ –¥–ª—è {username}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            currently_live[username] = True

        else:
            if stream_notified.get(username, False):
                # –°—Ç—Ä–∏–º–µ—Ä –±—ã–ª –≤ —Å–µ—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ñ—Ñ–ª–∞–π–Ω
                try:
                    guild = bot.get_guild(1282739459116503132)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    role = get_role_by_name(guild, "—Å—Ç—Ä–∏–º–∏—Ç")
                    if role:
                        if username == special_streamer_username:
                            # –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Å—Ç—Ä–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω
                            for user in special_users:
                                member = guild.get_member(int(user["discord_id"]))
                                if member:
                                    await member.remove_roles(role)
                                    print(f"–†–æ–ª—å '—Å—Ç—Ä–∏–º–∏—Ç' —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}")
                        else:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏
                            for member in guild.members:
                                if str(member.id) == streamer['discord_id']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                    await member.remove_roles(role)
                                    print(f"–†–æ–ª—å '—Å—Ç—Ä–∏–º–∏—Ç' —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}")
                                
                    stream_notified[username] = False

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ '—Å—Ç—Ä–∏–º–∏—Ç' –¥–ª—è {username}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
            currently_live[username] = False

        await asyncio.sleep(1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∏–º–µ
async def get_stream_game(username, access_token):
    url = f"https://api.twitch.tv/helix/streams?user_login={username}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    if data:
        return data[0]['game_name']
    else:
        return "Unknown Game"

async def get_viewer_count(username, access_token):
    url = f"https://api.twitch.tv/helix/streams?user_login={username}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    if data:
        return data[0]['viewer_count']
    else:
        return "0"

# Check if the user has the required role
def has_role(role_name):
    async def predicate(ctx):
        role = disnake.utils.get(ctx.guild.roles, name=role_name)
        return role in ctx.author.roles
    return commands.check(predicate)

# Command to add a new streamer
@bot.command(name='add_streamer')
@has_role('stuff')
async def add_streamer(ctx, discord_id: int, twitch_username: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
    role = disnake.utils.get(ctx.guild.roles, name='stuff')
    if role not in ctx.author.roles:
        await ctx.send("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
    streamers_config = load_streamers()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∏–º–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–∞ Twitch
    if any(streamer['username'] == twitch_username for streamer in streamers_config['streamers']):
        await ctx.send(f"–°—Ç—Ä–∏–º–µ—Ä —Å –∏–º–µ–Ω–µ–º {twitch_username} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return

    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID Discord
    member = ctx.guild.get_member(discord_id)
    if not member:
        await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {discord_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    new_streamer = {
        "discord_id": str(discord_id),
        "username": twitch_username
    }
    streamers_config['streamers'].append(new_streamer)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    save_streamers(streamers_config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
    stream_notified[twitch_username] = False

    await ctx.send(f"–°—Ç—Ä–∏–º–µ—Ä {twitch_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

@bot.command(name='remove_streamer')
@has_role('stuff')
async def remove_streamer(ctx, discord_id: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
    role = disnake.utils.get(ctx.guild.roles, name='stuff')
    if role not in ctx.author.roles:
        await ctx.send("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
    streamers_config = load_streamers()

    # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞
    streamer_to_remove = next((streamer for streamer in streamers_config['streamers'] if streamer['discord_id'] == str(discord_id)), None)

    if not streamer_to_remove:
        await ctx.send(f"–°—Ç—Ä–∏–º–µ—Ä —Å ID {discord_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    streamers_config['streamers'].remove(streamer_to_remove)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    save_streamers(streamers_config)

    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
    twitch_username = streamer_to_remove['username']
    stream_notified.pop(twitch_username, None)

    await ctx.send(f"–°—Ç—Ä–∏–º–µ—Ä {twitch_username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_time_window():
    now = datetime.utcnow()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    last_check_time = now - timedelta(minutes=10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    return last_check_time.isoformat() + 'Z', now.isoformat() + 'Z'

async def get_recent_clips(broadcaster_id, access_token, started_at, ended_at, username):
    url = (
        f'https://api.twitch.tv/helix/clips?broadcaster_id={broadcaster_id}'
        f'&first=100&started_at={started_at}&ended_at={ended_at}'
    )
    
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            clips = data.get('data', [])
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–ª–∏–ø–æ–≤ –¥–ª—è {username} ({broadcaster_id}): {len(clips)}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return clips



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å—Ç—Ä–∏–º–µ—Ä–∞
async def get_broadcaster_id(username, access_token):
    url = f'https://api.twitch.tv/helix/users?login={username}'
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            data = data.get('data', [])
            if data:
                return data[0]['id']
    return None

async def check_new_clips():
    access_token = get_twitch_token()
    streamers_config = load_streamers()

    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
        for streamer in streamers_config['streamers']:
            username = streamer['username']
            broadcaster_id = await get_broadcaster_id(username, access_token)
            avatar_url = await get_streamer_avatar(username, access_token)

            if broadcaster_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                started_at, ended_at = get_time_window()
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
                    recent_clips = await get_recent_clips(broadcaster_id, access_token, started_at, ended_at, username)

                    for clip in recent_clips:
                        clip_id = clip['id']
                        if clip_id not in stream_notified:
                            title = clip['title']
                            url = clip['url']
                            thumbnail_url = clip['thumbnail_url']

                            # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–ø–µ
                            embed = disnake.Embed(
                                title=f"{title}",
                                color=disnake.Color.purple(),
                            )
                            embed.set_image(url=thumbnail_url)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            embed.set_author(name=username, icon_url=avatar_url)

                            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–ª–∏–ø
                            button = disnake.ui.Button(style=disnake.ButtonStyle.link, label="–°–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∏–ø", url=url)
                            view = disnake.ui.View()
                            view.add_item(button)

                            # –£–∫–∞–∑—ã–≤–∞–µ–º ID —Ä–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞
                            role_mention = f"<@&{ping_id_stream}>"  # –§–æ—Ä–º–∞—Ç –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ ID

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å –ø–∏–Ω–≥–æ–º —Ä–æ–ª–∏
                            channel = bot.get_channel(channel_id_clips)
                            if channel:
                                content = f"{role_mention} –ù–æ–≤—ã–π –∫–ª–∏–ø –æ—Ç {username}!"
                                await channel.send(content=content, embed=embed, view=view)
                                
                            stream_notified[clip_id] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∫–ª–∏–ø –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–ø–æ–≤ –¥–ª—è {username}: {e}")
            
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞

        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –Ω–∞ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.add_job(check_new_clips, 'interval', seconds=15, max_instances=1)
scheduler.add_job(notify_stream, 'interval', seconds=5, max_instances=3)

scheduler.start()

def format_date(date_str):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    created_at_datetime = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%SZ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    day = created_at_datetime.day
    month = created_at_datetime.month
    year = created_at_datetime.year
    formatted_date = f"{day} {months[month]} {year} –≥–æ–¥–∞"

    return formatted_date

@bot.command(name='stats')
async def stats(ctx, username: str):
    access_token = get_twitch_token()  # –£–±–µ—Ä–∏—Ç–µ await –∑–¥–µ—Å—å
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_user_info(username, access_token)
    
    if user_info:
        user_id = user_info['id']
        avatar_url = user_info['profile_image_url']
        description = user_info['description']
        created_at = user_info['created_at']  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        formatted_date = format_date(created_at)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤
        followers_count = await get_followers_count(user_id, access_token)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API)
        subscribers_count = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API"

        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        embed = disnake.Embed(
            title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}",
            color=disnake.Color.blue()
        )
        embed.set_thumbnail(url=avatar_url)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        embed.add_field(name="–§–æ–ª–ª–æ–≤–µ—Ä—ã", value=followers_count, inline=True)
        embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", value=formatted_date, inline=True)
        embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è", inline=False)
        embed.set_author(name=username, icon_url=avatar_url)
        
        await ctx.send(embed=embed)
    else:
        await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Twitch.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–≤–∞—Ç–∞—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ id)
async def get_user_info(username, access_token):
    url = f"https://api.twitch.tv/helix/users?login={username}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            if data['data']:
                return data['data'][0]
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
async def get_followers_count(broadcaster_id, access_token):
    url = f"https://api.twitch.tv/helix/channels/followers?broadcaster_id={broadcaster_id}"
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            data = await response.json()
            return data.get('total', 0)
        
@bot.command(name='streamers')
async def streamers(ctx):
    # Load current streamers
    streamers_config = load_streamers()
    
    # Create embed
    embed = disnake.Embed(title="–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤", color=disnake.Color.purple())
    
    # Add each streamer to the embed
    for streamer in streamers_config['streamers']:
        discord_id = streamer['discord_id']
        username = streamer['username']
        discord_user = bot.get_user(int(discord_id))
        if discord_user:
            embed.add_field(name=f"Discord: {discord_user.name}", value=f"Twitch: {username}", inline=False)
    
    # Add a footer with the number of streamers and a thank you message
    num_streamers = len(streamers_config['streamers'])
    embed.set_footer(text=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {num_streamers} | –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è")
    
    # Send embed
    await ctx.send(embed=embed)

@bot.command(name='set_name')
@has_role('stuff')
async def set_bot_name(ctx, *, new_name: str):
    try:
        await bot.user.edit(username=new_name)
        await ctx.send(f"–ò–º—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `{new_name}`.")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞: {e}")

@bot.command(name='set_avatar')
@has_role('stuff')
async def set_bot_avatar(ctx, url: str = None):
    if url is None:
        if not ctx.message.attachments:
            await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤–∞—Ç–∞—Ä–∫–∏.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        attachment = ctx.message.attachments[0]
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = await attachment.read()
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
            await bot.user.edit(avatar=image)
            await ctx.send("–ê–≤–∞—Ç–∞—Ä–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±–æ—Ç–∞: {e}")

    else:
        # –ï—Å–ª–∏ URL –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç—Ç–æ–≥–æ URL
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        image = await response.read()
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
                        await bot.user.edit(avatar=image)
                        await ctx.send("–ê–≤–∞—Ç–∞—Ä–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.")
                    else:
                        await ctx.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {url}")
        except Exception as e:
            await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±–æ—Ç–∞: {e}")


@bot.command(name='help')
async def help_command(ctx):
    embed = disnake.Embed(
        title="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞",
        description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        color=0xF5B1CC
    )
    embed.add_field(
        name="!stats <twitch_username>",
        value="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–º–µ—Ä–∞.",
        inline=False
    )
    embed.add_field(
        name="!streamers",
        value="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.",
        inline=False
    )
    embed.add_field(
        name="!help",
        value="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏.",
        inline=False
    )
    await ctx.send(embed=embed)

@bot.command(name='help_admin')
@has_role('stuff')
async def help_command(ctx):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è has_role)
    role = disnake.utils.get(ctx.guild.roles, name='stuff')
    if role not in ctx.author.roles:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ `{role.name}`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ embed-—Å–æ–æ–±—â–µ–Ω–∏—è
    embed = disnake.Embed(
        title="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞",
        description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        color=0x9B59B6  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    )
    embed.add_field(
        name="!add_streamer <discord_id> <twitch_username>",
        value="–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        inline=False
    )
    embed.add_field(
        name="!remove_streamer <discord_id> <twitch_username>",
        value="–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        inline=False
    )
    embed.add_field(
        name="!stats <twitch_username>",
        value="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–º–µ—Ä–∞.",
        inline=False
    )
    embed.add_field(
        name="!streamers",
        value="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.",
        inline=False
    )
    embed.add_field(
        name="!send <id_channel>",
        value="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω—ã–π –∫–∞–Ω–∞–ª.",
        inline=False
    )
    embed.add_field(
        name="!set_name <new_name>",
        value="–ò–∑–º–µ–Ω—è–µ—Ç –∏–º—è –±–æ—Ç–∞.",
        inline=False
    )
    embed.add_field(
        name="!set_avatar <url>",
        value="–ò–∑–º–µ–Ω—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –±–æ—Ç–∞ –ø–æ url –ª–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.",
        inline=False
    )
    embed.add_field(
        name="!help",
        value="–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        inline=False
    )
    embed.add_field(
        name="!help_admin",
        value="–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        inline=False
    )
    await ctx.send(embed=embed)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    elif isinstance(error, commands.CommandNotFound):
        await ctx.send('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')
    elif isinstance(error, commands.BadArgument):
        await ctx.send('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await ctx.send(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}')
bot.run(discord_token)

